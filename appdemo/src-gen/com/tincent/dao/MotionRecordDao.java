package com.tincent.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tincent.dao.MotionRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOTION_RECORD".
*/
public class MotionRecordDao extends AbstractDao<MotionRecord, Long> {

    public static final String TABLENAME = "MOTION_RECORD";

    /**
     * Properties of entity MotionRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PlanId = new Property(1, String.class, "PlanId", false, "PLAN_ID");
        public final static Property PatientId = new Property(2, String.class, "PatientId", false, "PATIENT_ID");
        public final static Property PlanTypeId = new Property(3, String.class, "PlanTypeId", false, "PLAN_TYPE_ID");
        public final static Property PlanTypeName = new Property(4, String.class, "PlanTypeName", false, "PLAN_TYPE_NAME");
        public final static Property MotionTypeId = new Property(5, String.class, "MotionTypeId", false, "MOTION_TYPE_ID");
        public final static Property MotionTypeName = new Property(6, String.class, "MotionTypeName", false, "MOTION_TYPE_NAME");
        public final static Property MotionDay = new Property(7, java.util.Date.class, "MotionDay", false, "MOTION_DAY");
        public final static Property MotionDuration = new Property(8, int.class, "MotionDuration", false, "MOTION_DURATION");
        public final static Property MotionWeek = new Property(9, String.class, "MotionWeek", false, "MOTION_WEEK");
    };


    public MotionRecordDao(DaoConfig config) {
        super(config);
    }
    
    public MotionRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOTION_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PLAN_ID\" TEXT NOT NULL ," + // 1: PlanId
                "\"PATIENT_ID\" TEXT NOT NULL ," + // 2: PatientId
                "\"PLAN_TYPE_ID\" TEXT NOT NULL ," + // 3: PlanTypeId
                "\"PLAN_TYPE_NAME\" TEXT NOT NULL ," + // 4: PlanTypeName
                "\"MOTION_TYPE_ID\" TEXT NOT NULL ," + // 5: MotionTypeId
                "\"MOTION_TYPE_NAME\" TEXT NOT NULL ," + // 6: MotionTypeName
                "\"MOTION_DAY\" INTEGER NOT NULL ," + // 7: MotionDay
                "\"MOTION_DURATION\" INTEGER NOT NULL ," + // 8: MotionDuration
                "\"MOTION_WEEK\" TEXT NOT NULL );"); // 9: MotionWeek
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOTION_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MotionRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPlanId());
        stmt.bindString(3, entity.getPatientId());
        stmt.bindString(4, entity.getPlanTypeId());
        stmt.bindString(5, entity.getPlanTypeName());
        stmt.bindString(6, entity.getMotionTypeId());
        stmt.bindString(7, entity.getMotionTypeName());
        stmt.bindLong(8, entity.getMotionDay().getTime());
        stmt.bindLong(9, entity.getMotionDuration());
        stmt.bindString(10, entity.getMotionWeek());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MotionRecord readEntity(Cursor cursor, int offset) {
        MotionRecord entity = new MotionRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // PlanId
            cursor.getString(offset + 2), // PatientId
            cursor.getString(offset + 3), // PlanTypeId
            cursor.getString(offset + 4), // PlanTypeName
            cursor.getString(offset + 5), // MotionTypeId
            cursor.getString(offset + 6), // MotionTypeName
            new java.util.Date(cursor.getLong(offset + 7)), // MotionDay
            cursor.getInt(offset + 8), // MotionDuration
            cursor.getString(offset + 9) // MotionWeek
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MotionRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanId(cursor.getString(offset + 1));
        entity.setPatientId(cursor.getString(offset + 2));
        entity.setPlanTypeId(cursor.getString(offset + 3));
        entity.setPlanTypeName(cursor.getString(offset + 4));
        entity.setMotionTypeId(cursor.getString(offset + 5));
        entity.setMotionTypeName(cursor.getString(offset + 6));
        entity.setMotionDay(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setMotionDuration(cursor.getInt(offset + 8));
        entity.setMotionWeek(cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MotionRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MotionRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
